#! /usr/bin/perl

# Spamhaus/JANET feed pusher
# Matthew Newton
# University of Leicester
#
# $Format:%H% d$

use strict;
use IO::Socket;
use Fcntl;
use Getopt::Std;
require "sys/ioctl.ph";


######################################################################
# Set defaults for configuration

our $configfile = "/etc/spamhausfeed.conf";
our $logfile = undef;
our $pidfile = "/var/run/spamhausfeed.pid";
our @ourhosts = ( );
our @ourhelos = ( );
our $desthost = undef;
our $destport = undef;
our $delay = 1; # seconds to delay between trying to read
our $checkinode = 5; # number of null-reads before checking inode change

our $foreground = 0;
our $debug = 0;
our $dryrun = 0;


######################################################################
# Get options - config file is printed in help, so read that before
# processing the -h option

my %options = ();
getopts("hc:d:p:l:P:Dfn", \%options);
$configfile = $options{c} if defined $options{c};
syntax(0) if defined $options{h};

syntax(1) if $ARGV[0];

if (-r $configfile) {
  require $configfile;
} else {
  warn "cannot read config file '$configfile'\n" if $debug;
}

$desthost = $options{d} if defined $options{d};
$destport = $options{p} if defined $options{p};
$logfile = $options{l} if defined $options{l};
$pidfile = $options{P} if defined $options{P};

$foreground = 1 if defined $options{f};
$dryrun = 1 if defined $options{n};
if (defined $options{D}) {
  $foreground = 1;
  $debug = 1;
}


######################################################################
# Check important options are set

die "error: destination host is not defined\n" unless defined $desthost;
die "error: destination port is not defined\n" unless defined $destport;
die "error: log file is not defined\n" unless defined $logfile;
die "error: unable to read log file '$logfile'\n" unless -r $logfile;


######################################################################
# Set up variables, and open UDP socket

my $fh = undef;
my $pos;
my $inode = 0;
my $huprecvd = 0;
my $termrecvd = 0;
my $socket;

unless ($dryrun) {
  $socket = IO::Socket::INET->new(Proto => "udp",
                                  PeerAddr => $desthost,
                                  PeerPort => $destport)
    or die "unable to create UDP socket: $@\n";
}


######################################################################
# Deamonise, and set up signals

daemonise($pidfile) unless $foreground;

$SIG{TERM} = sub { $termrecvd = 1; };
$SIG{HUP} = sub { $huprecvd = 1; };


######################################################################
# Main loop - tail log file and process accordingly

my $nullreadcount = 0;

while (!$termrecvd) {

  unless (defined($fh)) {
    open $fh, "<", $logfile;
    jumptoend($fh);
    $inode = (stat($fh))[1];
  }

  my $linecount = 0;
  $pos = tell($fh);  

  READLOOP: while (my $line = <$fh>) {

# Check to see if we only received part of a line; if so, back up
# and wait - it's very unlikely this will happen
    if ($line !~ /\n$/) {
      seek($fh, 0, $pos);
      last READLOOP;
    }
    $pos = tell($fh);  

    $linecount++;
    next READLOOP
      unless $line =~ /SHF: ([^\t]+) \t (.*) \t ([^\t]+) \t ([^\t]*)\n/x;

    print "read: $line" if $debug;

    my ($ip, $helo, $time, $rdns) = ($1, $2, $3, $4);

# Skip records where the IP address is one of our own
    foreach my $re (@ourhosts) {
      next READLOOP if $ip =~ $re;
    }

# Munge records where the HELO is one of our own, but the IP is not
    foreach my $re (@ourhelos) {
      if ($helo =~ $re) {
        ($ip, $helo, $time, $rdns) = ($ip, "**FORCE_LOC", $time, $helo);
        last;
      }
    }

# Send UDP packet
    transmit($socket, $ip, $helo, $time, $rdns);
  }

  $nullreadcount += $linecount ? 0 : 1;

  if ($nullreadcount > $checkinode) {

# Nothing has been read for $checkinode iterations; maybe the logfile rotated?
    if ((stat($logfile))[1] != $inode) {
      $huprecvd = 1;
    }

    $nullreadcount = 0;
  }

# TERM/HUP signals will interrupt this
  sleep $delay;

# HUP causes the logfile to be closed (and therefore reopened)
  if ($huprecvd) {
    $huprecvd = 0;
    close ($fh);
    $fh = undef;
  }
}


######################################################################
# Tidy up before exit

if (defined $pidfile) {
  unlink $pidfile;
}

exit;


#-----------------------------


sub jumptoend
{
  my $fh = shift;

  seek($fh, -10000, 2);
  my $pos = tell($fh);
  my $opos;

  while (my $line = <$fh>) {
    $opos = $pos;
    $pos = tell($fh);
  }

  seek($fh, $opos, 0);
}


sub daemonise
{
  my $pidfile = shift;
  my $pfh;

  if (defined $pidfile) {
    open $pfh, ">", $pidfile || die "unable to open pidfile";
  }

  local *TT;
  exit if fork();
  setpgrp(0,0);
  if (sysopen(TT, "/dev/tty", O_RDWR)) {
    ioctl TT, TIOCNOTTY(), 0;
    close TT;
  }
  exit if fork();
  chdir "/";

  if (defined $pidfile) {
    print $pfh "$$";
    close $pfh;
  }

  open STDIN, "< /dev/null";
  open STDOUT, "> /dev/null";
  open STDERR, "> /dev/null";
}



sub transmit
{
  my ($socket, $ip, $helo, $time, $rdns) = @_;
  my $rc;
  my $str;

# translate non-printable chars in HELO string
  $helo =~ s/ ([ \000-\040 \177-\377 ]) / sprintf("\\x%02x", ord($1)) /gex;

  $str = "$ip\t$helo\t$time\t$rdns\n";

  print "(dryrun) " if $dryrun;
  print "sending: $str" if $debug;

  if (!$dryrun) {
    my $retry = 3;
    while ($retry > 0 and !defined($socket->send($str))) {
      warn "error: $!\n" if $debug;
      $retry--;
    }
  }
}

sub syntax
{
  my $xc = shift;

  print <<EOF;
Syntax: $0 [options]
Where options are:
  -c <config>  set config file (default /etc/spamhausfeed.conf)
  -d <host>    set destination host
  -p <port>    set destination port
  -l <logfile> mail log file to read
  -P <pidfile> where to write PID file to
  -D <num>     enable debugging (implies -f)
  -f           run in foreground, do not daemonise
  -n           dry run - don't actually send UDP packets
  -h           show this information

Current config file: $configfile
EOF

  exit($xc);
}

